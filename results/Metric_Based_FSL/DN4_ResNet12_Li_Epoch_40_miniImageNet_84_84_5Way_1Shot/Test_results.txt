========================================== Start Test ==========================================

=> loading checkpoint './results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot/model_best.pth.tar'
=> loaded checkpoint './results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot/model_best.pth.tar' (epoch 39)
Namespace(adam=False, aug_shot_num=20, beta1=0.5, clamp_lower=-0.01, clamp_upper=0.01, classifier_model='DN4', cosine=True, cuda=True, current_epoch=39, data_name='miniImageNet', dataset_dir='/home/liwenbin/Datasets/miniImageNet--ravi', encoder_model='ResNet12_Li', episodeSize=1, episode_test_num=1000, episode_train_num=10000, episode_val_num=1000, epochs=40, imageSize=84, lr=0.01, lr_decay_epochs=[60, 80], lr_decay_rate=0.1, mode='train', momentum=0.9, nc=3, neighbor_k=3, ngpu=1, outf='./results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot', print_freq=100, query_num=10, resume='', shot_num=1, start_epoch=0, test_aug=False, testepisodeSize=1, train_aug=True, way_num=5, weight_decay=0.0005, workers=8)
Fewshot_model(
  (features): ResNet_84(
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(64, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(320, 640, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
  )
  (classifier): ImgtoClass_Metric()
)
==================== The 0-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.09 (1.27)	Prec@1 58.00 (58.67)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.49 (1.30)	Prec@1 54.00 (57.54)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.61 (1.30)	Prec@1 48.00 (57.78)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 1.33 (1.31)	Prec@1 52.00 (57.71)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 1.29 (1.30)	Prec@1 54.00 (57.72)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.11 (1.31)	Prec@1 58.00 (57.63)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.25 (1.30)	Prec@1 48.00 (57.63)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 0.91 (1.30)	Prec@1 64.00 (57.68)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.14 (1.30)	Prec@1 52.00 (57.67)
 * Prec@1 57.62 Best_prec1 60.83
Test accuracy: 57.624001 h: 0.660502 

==================== The 1-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.60 (1.30)	Prec@1 48.00 (56.14)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 0.84 (1.27)	Prec@1 68.00 (57.93)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 0.90 (1.28)	Prec@1 72.00 (57.89)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.72 (1.29)	Prec@1 78.00 (57.55)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 1.47 (1.28)	Prec@1 52.00 (57.68)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.59 (1.28)	Prec@1 38.00 (57.61)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.18 (1.27)	Prec@1 64.00 (57.68)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.14 (1.27)	Prec@1 58.00 (57.57)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 0.75 (1.28)	Prec@1 66.00 (57.47)
 * Prec@1 57.53 Best_prec1 60.83
Test accuracy: 57.528000 h: 0.642632 

==================== The 2-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.65 (1.28)	Prec@1 52.00 (57.70)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.51 (1.28)	Prec@1 54.00 (57.20)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.13 (1.32)	Prec@1 60.00 (56.73)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 1.31 (1.33)	Prec@1 50.00 (56.49)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 0.87 (1.33)	Prec@1 70.00 (56.48)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.11 (1.33)	Prec@1 64.00 (56.48)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.48 (1.32)	Prec@1 58.00 (56.45)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.53 (1.32)	Prec@1 58.00 (56.59)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.12 (1.31)	Prec@1 60.00 (56.65)
 * Prec@1 56.94 Best_prec1 60.83
Test accuracy: 56.939999 h: 0.674779 

==================== The 3-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 0.61 (1.33)	Prec@1 74.00 (55.86)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.23 (1.33)	Prec@1 60.00 (56.18)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 0.82 (1.31)	Prec@1 74.00 (56.34)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.96 (1.33)	Prec@1 68.00 (56.45)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 1.27 (1.31)	Prec@1 58.00 (56.70)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 0.87 (1.31)	Prec@1 66.00 (56.86)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.39 (1.30)	Prec@1 54.00 (56.89)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.08 (1.30)	Prec@1 58.00 (56.87)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 0.65 (1.29)	Prec@1 74.00 (57.19)
 * Prec@1 57.32 Best_prec1 60.83
Test accuracy: 57.318001 h: 0.667561 

==================== The 4-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 2.14 (1.33)	Prec@1 42.00 (56.32)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.00 (1.31)	Prec@1 60.00 (56.89)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.46 (1.31)	Prec@1 50.00 (56.81)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 1.48 (1.32)	Prec@1 38.00 (56.68)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 0.56 (1.31)	Prec@1 82.00 (56.81)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.20 (1.30)	Prec@1 56.00 (57.09)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.29 (1.29)	Prec@1 58.00 (57.24)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.17 (1.29)	Prec@1 70.00 (57.29)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 0.83 (1.29)	Prec@1 66.00 (57.42)
 * Prec@1 57.44 Best_prec1 60.83
Test accuracy: 57.439999 h: 0.701691 

Mean_accuracy: 57.370000 h: 0.669433
===================================== Test is END =====================================

========================================== Start Test ==========================================

=> loading checkpoint './results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot/model_best.pth.tar'
=> loaded checkpoint './results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot/model_best.pth.tar' (epoch 39)
Namespace(adam=False, aug_shot_num=20, beta1=0.5, clamp_lower=-0.01, clamp_upper=0.01, classifier_model='DN4', cosine=False, cuda=True, current_epoch=39, data_name='miniImageNet', dataset_dir='/home/liwenbin/Datasets/miniImageNet--ravi', encoder_model='ResNet12_Li', episodeSize=1, episode_test_num=1000, episode_train_num=10000, episode_val_num=1000, epochs=40, imageSize=84, lr=0.01, lr_decay_epochs=[60, 80], lr_decay_rate=0.1, mode='train', momentum=0.9, nc=3, neighbor_k=3, ngpu=1, outf='./results/Metric_Based_FSL/DN4_ResNet12_Li_Epoch_40_miniImageNet_84_84_5Way_1Shot', print_freq=100, query_num=10, resume='', shot_num=1, start_epoch=0, test_aug=False, testepisodeSize=1, train_aug=True, way_num=5, weight_decay=0.0005, workers=8)
Fewshot_model(
  (features): ResNet_84(
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(64, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): LeakyReLU(negative_slope=0.1)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (downsample): Sequential(
          (0): Conv2d(320, 640, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (DropBlock): DropBlock()
      )
    )
  )
  (classifier): ImgtoClass_Metric()
)
==================== The 0-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.21 (1.33)	Prec@1 62.00 (57.15)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.31 (1.29)	Prec@1 48.00 (57.80)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 0.96 (1.28)	Prec@1 64.00 (57.71)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 1.24 (1.27)	Prec@1 58.00 (57.84)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 0.74 (1.27)	Prec@1 70.00 (57.99)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.45 (1.27)	Prec@1 52.00 (57.92)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 0.91 (1.28)	Prec@1 64.00 (57.55)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.00 (1.28)	Prec@1 62.00 (57.48)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.07 (1.28)	Prec@1 64.00 (57.59)
 * Prec@1 57.60 Best_prec1 60.83
Test accuracy: 57.604000 h: 0.649843 

==================== The 1-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.27 (1.25)	Prec@1 56.00 (57.92)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.34 (1.28)	Prec@1 60.00 (57.22)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.91 (1.31)	Prec@1 50.00 (57.20)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.87 (1.29)	Prec@1 68.00 (57.16)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 0.96 (1.32)	Prec@1 66.00 (56.70)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 0.80 (1.32)	Prec@1 72.00 (56.79)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.17 (1.31)	Prec@1 54.00 (56.97)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.01 (1.30)	Prec@1 66.00 (57.25)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.41 (1.30)	Prec@1 56.00 (57.17)
 * Prec@1 57.23 Best_prec1 60.83
Test accuracy: 57.228001 h: 0.690253 

==================== The 2-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 0.91 (1.34)	Prec@1 70.00 (56.50)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 0.97 (1.33)	Prec@1 66.00 (56.36)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.32 (1.34)	Prec@1 52.00 (56.09)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.87 (1.33)	Prec@1 68.00 (56.27)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 1.68 (1.34)	Prec@1 48.00 (56.13)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 0.96 (1.32)	Prec@1 66.00 (56.56)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 0.87 (1.31)	Prec@1 68.00 (56.59)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.02 (1.31)	Prec@1 64.00 (56.81)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.19 (1.30)	Prec@1 60.00 (56.94)
 * Prec@1 56.82 Best_prec1 60.83
Test accuracy: 56.818001 h: 0.680701 

==================== The 3-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.48 (1.33)	Prec@1 44.00 (55.64)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.61 (1.32)	Prec@1 44.00 (56.45)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.34 (1.31)	Prec@1 58.00 (57.00)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.90 (1.30)	Prec@1 74.00 (57.39)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 2.13 (1.30)	Prec@1 30.00 (57.16)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.06 (1.29)	Prec@1 62.00 (57.38)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.26 (1.29)	Prec@1 56.00 (57.26)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 1.17 (1.30)	Prec@1 56.00 (57.05)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.21 (1.31)	Prec@1 68.00 (57.06)
 * Prec@1 57.18 Best_prec1 60.83
Test accuracy: 57.180000 h: 0.669535 

==================== The 4-th round ====================
Val-(39): [100/1000]	Time 0.07 (0.08)	Loss 1.27 (1.31)	Prec@1 54.00 (57.27)
Val-(39): [200/1000]	Time 0.07 (0.07)	Loss 1.42 (1.32)	Prec@1 48.00 (57.04)
Val-(39): [300/1000]	Time 0.07 (0.07)	Loss 1.31 (1.32)	Prec@1 50.00 (56.74)
Val-(39): [400/1000]	Time 0.07 (0.07)	Loss 0.68 (1.31)	Prec@1 72.00 (56.94)
Val-(39): [500/1000]	Time 0.07 (0.07)	Loss 0.66 (1.31)	Prec@1 76.00 (56.83)
Val-(39): [600/1000]	Time 0.07 (0.07)	Loss 1.71 (1.31)	Prec@1 44.00 (56.93)
Val-(39): [700/1000]	Time 0.07 (0.07)	Loss 1.19 (1.30)	Prec@1 60.00 (57.29)
Val-(39): [800/1000]	Time 0.07 (0.07)	Loss 0.80 (1.31)	Prec@1 72.00 (57.08)
Val-(39): [900/1000]	Time 0.07 (0.07)	Loss 1.70 (1.31)	Prec@1 52.00 (57.13)
 * Prec@1 57.19 Best_prec1 60.83
Test accuracy: 57.188000 h: 0.653373 

Mean_accuracy: 57.203600 h: 0.668741
===================================== Test is END =====================================

